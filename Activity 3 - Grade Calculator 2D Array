import java.io.*;
import java.util.Scanner;

public class Main {

    public static final double MIN_GRADE = 50;
    public static final String FILE_DIR = "target/records";
    public static final int MAX_SUBJECTS = 64;
    public static final int NUM_OF_TERMS = 3;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter student name: ");
        String name = scanner.nextLine();

        String[] subjects = new String[MAX_SUBJECTS];
        double[][] grades = new double[MAX_SUBJECTS][NUM_OF_TERMS];
        String[] terms = {"Prelim", "Midterm", "Finals"};

        StringBuilder sb = new StringBuilder();
        sb.append("\n").append(String.format("%-15s%-10s%-10s%-10s%s\n", "SUBJECTS", "PRELIM", "MIDTERM", "FINAL", "FINAL RATING"));

        int subjectCount = 0; // Track the actual number of subjects entered

        while (subjectCount < MAX_SUBJECTS) {
            System.out.print("Enter subject name: ");
            subjects[subjectCount] = scanner.nextLine();
            sb.append(String.format("%-15s", subjects[subjectCount]));

            for (int termIndex = 0; termIndex < NUM_OF_TERMS; termIndex++) {
                while (true) { // Loop until valid input is received
                    System.out.print("\t" + terms[termIndex] + ": ");
                    try {
                        grades[subjectCount][termIndex] = Double.parseDouble(scanner.nextLine());
                        if (grades[subjectCount][termIndex] < MIN_GRADE) {
                            throw new IllegalArgumentException("Error! Grades must be at least 50.");
                        }
                        break; // Valid input, exit the inner loop
                    } catch (NumberFormatException e) {
                        System.out.println("\tError! Invalid number format. Please enter a number.");
                    } catch (IllegalArgumentException e) {
                        System.out.println("\t" + e.getMessage());
                    }
                }
                sb.append(String.format("%-10.2f", grades[subjectCount][termIndex]));
            }

            double finalRating = getFinalRating(grades[subjectCount]);
            sb.append(String.format("%.2f\n", finalRating));

            System.out.print("Add another subject (y/n): ");
            char choice = scanner.nextLine().toLowerCase().charAt(0); // Improved input handling

            subjectCount++;

            if (choice != 'y') {
                break;
            }
        }

        System.out.println(sb);
        writeToFile(name, sb.toString());
        readAllFiles(); //To display all files after writing.
        scanner.close(); //Will close the scanner
    }

    public static double getFinalRating(double[] termGrades) {
        return termGrades[0] * 0.3 + termGrades[1] * 0.3 + termGrades[2] * 0.4;
    }

    public static void writeToFile(String fileName, String data) {
        File folder = new File(FILE_DIR);
        if (!folder.exists()) {
            folder.mkdirs();
        }
        File file = new File(folder, fileName + ".txt"); //add .txt extension
        try (FileWriter fw = new FileWriter(file)) {
            fw.write(data);
        } catch (IOException e) {
            System.out.println("Error saving file: " + e.getMessage());
        }
    }

    public static void readAllFiles() {
        File folder = new File(FILE_DIR);
        if (!folder.exists() || !folder.isDirectory()) { //check if folder exists and is a directory.
            System.out.println("No grade records found.");
            return;
        }

        File[] studentGradeFiles = folder.listFiles();
        if (studentGradeFiles != null) {
            for (File file : studentGradeFiles) {
                if (file.isFile()) {
                    readFile(file);
                }
            }
        }
    }

    public static void readFile(File file) {
        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            System.out.println("--------------------------");
            System.out.println("File: " + file.getName()); //print filename
            String line;
            while ((line = br.readLine()) != null) {
                System.out.println(line);
            }
        } catch (IOException e) {
            System.out.println("Error reading file: " + e.getMessage());
        }
    }
}
